{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PR\u00c1CTICAS 2 ASIX APLICACIONES WEB - IES JAUME II EL JUST","text":""},{"location":"Unidad1/practica1-1/","title":"\ud83d\udcd8 Pr\u00e1ctica 1: Git Trabajando con ramas y uniones","text":"<p>En esta pr\u00e1ctica aprender\u00e1s los conceptos de ramas en Git, su gesti\u00f3n y ciclo de vida, y c\u00f3mo realizar uniones (merge) para fusionar ramas, resolviendo los posibles conflictos que puedan surgir durante el proceso</p> <p>Objetivos</p> <ul> <li>Aprender\u00e1s el concepto de rama.</li> <li>La gesti\u00f3n y el ciclo de vida (creaci\u00f3n, modificaci\u00f3n, borrado, \u2026) de ramas.</li> <li>Aprender\u00e1s el concepto de uni\u00f3n (merge) que nos posibilita la fusi\u00f3n de ramas.    </li> <li>A solucionar los posibles conflictos que pueden aparecer en el momento del merge.</li> </ul>"},{"location":"Unidad1/practica1-1/#1-inicializacion-del-repositorio-git","title":"1. Inicializaci\u00f3n del repositorio Git","text":"<p>Antes de comenzar a trabajar con ramas, debemos asegurarnos de que estamos en un repositorio de Git. Si a\u00fan no has inicializado uno, este paso es clave. Ejecutando el siguiente comando lo inicializamos:     <pre><code>    git init\n</code></pre> Esto crear\u00e1 una carpeta <code>.git</code> donde Git gestionar\u00e1 todo el historial de tu proyecto.</p>"},{"location":"Unidad1/practica1-1/#2-crear-una-nueva-rama-y-comprobar-su-creacion","title":"2. Crear una nueva rama y comprobar su creaci\u00f3n","text":"<p>En este paso, crearemos una nueva rama en el repositorio local. Las ramas permiten trabajar en diferentes versiones del proyecto sin afectar el trabajo principal.  Tambi\u00e9n comprobaremos que la rama se ha creado correctamente.</p> <ul> <li>Cambia a la rama primera     <pre><code>    git checkout primera\n</code></pre></li> <li>Crea un nuevo archivo en esta rama. Por ejemplo un <code>.txt</code> <pre><code>    nano fichero.txt\n</code></pre>     Escribe algo en el archivo, gu\u00e1rdalo y ci\u00e9rralo.</li> <li>Ahora cambia a la rama principal <code>main</code> para fusionar la nueva rama primera con ella:     <pre><code>    git checkout main\n</code></pre></li> <li> <p>Fusiona los cambios de la rama <code>primera</code> en la rama <code>main</code>:</p> <p><pre><code>   git merge primera\n</code></pre> \u00bfSe ha producido conflicto? No se ha producido ning\u00fan conflicto porque el archivo fichero.txt no exist\u00eda en la rama main, y al fusionarlo no hay sobreposici\u00f3n de contenido.</p> </li> </ul> <p>Una vez fusionada la rama con el proyecto principal, no necesitamos la rama <code>primera</code> m\u00e1s. En este paso, aprenderemos c\u00f3mo eliminar una rama local que ya no es necesaria.     <pre><code>    git branch -d primera\n</code></pre></p>"},{"location":"Unidad1/practica1-1/#3-borrar-la-rama-primera","title":"3. Borrar la rama <code>primera</code>","text":""},{"location":"Unidad1/practica1-1/#4-crear-una-rama-segunda-y-provocar-un-conflicto-al-modificar-un-archivo","title":"4. Crear una rama <code>segunda</code> y provocar un conflicto al modificar un archivo","text":"<p>En este paso, crearemos una nueva rama <code>segunda</code> y modificaremos un archivo existente para generar un conflicto. Los conflictos ocurren cuando dos ramas intentan modificar la misma parte de un archivo, y Git no sabe cu\u00e1l versi\u00f3n debe conservar.</p> <ul> <li> <p>Crea una nueva rama llamada <code>segunda</code>:</p> <pre><code>git checkout -b segunda\n</code></pre> </li> <li> <p>Cambia a la rama <code>segunda</code> y modifica un archivo existente, por ejemplo <code>fichero.txt</code>:</p> <pre><code>nano fichero.txt\n</code></pre> </li> <li> <p>Cambia de nuevo a la rama <code>main</code>:</p> <pre><code>git checkout main\n</code></pre> </li> <li> <p>Intenta fusionar la rama <code>segunda</code> con <code>main</code>:</p> <pre><code>git merge segunda\n</code></pre> </li> </ul> <p>Comprobaci\u00f3n del conflicto: Si has modificado el mismo archivo tanto en main como en segunda, se producir\u00e1 un conflicto de fusi\u00f3n. Puedes comprobar el conflicto con el siguiente comando: <code>git diff</code></p>"},{"location":"Unidad1/practica1-1/#5-solucionar-el-conflicto-y-sincronizar-con-el-remoto","title":"5. Solucionar el conflicto y sincronizar con el remoto","text":"<p>Finalmente, aprenderemos a resolver los conflictos generados, tomando decisiones sobre qu\u00e9 cambios conservar. Despu\u00e9s de resolver el conflicto, sincronizaremos los cambios con el repositorio remoto, para que est\u00e9n accesibles en GitHub. - Para resolver el conflicto, edita el archivo donde se ha producido el error. Git indicar\u00e1 las secciones conflictivas con etiquetas como <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, y <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>. Solo necesitas elegir qu\u00e9 partes del c\u00f3digo conservar o combinarlas.</p> <ul> <li> <p>Una vez que hayas resuelto el conflicto, guarda el archivo y a\u00f1ade los cambios con:</p> <pre><code>git add fichero.txt\n</code></pre> </li> <li> <p>Completa la fusi\u00f3n con:</p> <pre><code>git commit -m \"Conflicto resuelto por Max\"\n</code></pre> </li> <li> <p>Finalmente, sincroniza los cambios de la rama segunda con el repositorio remoto:</p> <pre><code>git push origin segunda\n</code></pre> </li> </ul> <p>Hemos resuelto el conflicto y subido la soluci\u00f3n a GitHub.</p>"},{"location":"Unidad1/practica1-2/","title":"\ud83d\udcd8 Pr\u00e1ctica 2: \u00bfC\u00f3mo colaborar en un proyecto de software libre? \u00bfQu\u00e9 es un Pull Request (PR)?","text":"<p>Aprenderemos qu\u00e9 es un Pull Request y c\u00f3mo utilizarlo para proponer cambios en un proyecto de GitHub, facilitando la colaboraci\u00f3n y revisi\u00f3n de c\u00f3digo.</p> <p>Objetivos</p> <ul> <li>Conocer el concepto de Pull Request.</li> <li>Conocer la metodolog\u00eda para colaborar en proyectos alojados en GitHub realizando Pull Requests.</li> </ul>"},{"location":"Unidad1/practica1-2/#instrucciones-para-como-colaborar-en-un-proyecto-con-pr","title":"Instrucciones para como colaborar en un proyecto con PR","text":"<p>Realiza un fork del repositorio</p> <ul> <li>Ve al repositorio principal en GitHub (por ejemplo, <code>https://github.com/maxm04/IAW</code>).</li> <li>Haz clic en el bot\u00f3n \"Fork\" que se encuentra en la parte superior derecha.</li> </ul> <p>Realizado el fork, tendr\u00e1s una copia del repositorio en tu cuenta de GitHub. Este nuevo repositorio ser\u00e1 tu versi\u00f3n del proyecto, donde podr\u00e1s realizar cambios.</p> <p>Clona tu fork a tu m\u00e1quina local</p> <p>Debes clonar el repositorio desde tu cuenta de GitHub a tu m\u00e1quina local. Para hacerlo, sigue estos pasos:</p> <ul> <li>Abre tu terminal y ejecuta el siguiente comando: <pre><code>git clone git@github.com:maxm04/IAW.git\n</code></pre> </li> </ul> <p>Una vez clonado el repositorio crearemos una nueva rama</p> <p>Crear nueva rama Para mantener el trabajo organizado y evitar conflictos, es recomendable crear una nueva rama donde realizar\u00e1s los cambios.</p> <pre><code>git checkout -b (NOMBRE DE LA RAMA)\n</code></pre> <p>Confirmar los cambios - A\u00f1ade los archivos modificados al \u00edndice de Git</p> <pre><code>git add .\n</code></pre> <ul> <li> <p>Realiza el commit con un mensaje descriptivo:</p> <p>git commit -m \"Descripci\u00f3n de los cambios realizados\"</p> </li> </ul> <p>Una vez hecho el commit seguimos.</p> <p>Sube los cambios a GitHub</p> <ul> <li>Sube los cambios de tu rama local al repositorio en GitHub. Usa el siguiente comando para empujar los cambios:<pre><code>git push origin (NOMBRE DE LA RAMA)\n</code></pre> </li> </ul> <p>Crea un Pull Request (PR) Un Pull Request es una solicitud para que los mantenedores del proyecto revisen y fusionen tus cambios con el c\u00f3digo principal.Un Pull Request es una solicitud para que los mantenedores del proyecto revisen y fusionen tus cambios con el c\u00f3digo principal.</p> <ol> <li>Ve a tu repositorio forkeado en GitHub.</li> <li>Ver\u00e1s un mensaje indicando que recientemente subiste cambios en tu rama. Haz clic en \"Compare &amp; pull request\".</li> <li>A\u00f1ade una descripci\u00f3n detallada de los cambios que has realizado</li> <li>Haz clic en \"Create Pull Request\".</li> </ol> <p>Ahora solo falta esperar que nos validen lso cambios para que sean publicados en el repositorio principal donde quer\u00edamos colaborar.</p>"},{"location":"Unidad1/practica1-3/","title":"\ud83d\udcd8 Pr\u00e1ctica 3: Despliegue de una p\u00e1gina est\u00e1tica con MkDocs","text":"<p>En esta pr\u00e1ctica aprender\u00e1s a desplegar una p\u00e1gina web est\u00e1tica utilizando MkDocs y GitHub Pages. Siguiendo los pasos detallados a continuaci\u00f3n, crear\u00e1s y publicar\u00e1s tu p\u00e1gina.</p> <p>Objetivos</p> <ul> <li>Aprender a utilizar MarkDown</li> <li>Aprender a utilizar MkDocs</li> <li>Aprender a utilizar GitHub Pages</li> <li>Desplegar una p\u00e1gina web est\u00e1tica</li> </ul>"},{"location":"Unidad1/practica1-3/#instalacion-de-herramientas-necesarias","title":"\u2692 Instalaci\u00f3n de herramientas necesarias","text":"<p>Antes de comenzar, aseg\u00farate de tener instaladas las siguientes herramientas en tu sistema:</p> <ol> <li> <p>Python: Inst\u00e1lalo desde python.org o ejecutando por terminal:</p> <pre><code>    pip install mkdocs\n</code></pre> </li> <li> <p>MkDocs: Para instalar MkDocs, abre una terminal y ejecuta:</p> <pre><code>    pip install mkdocs\n</code></pre> </li> </ol> <p>Antes de comenzar, aseg\u00farate de tener instaladas las siguientes herramientas en tu sistema:</p> <ol> <li> <p>Para crear un nuevo proyecto de MkDocs, usa los siguientes comandos:</p> <ul> <li>Crea un nuevo proyecto llamado 'web' con la estructura por defecto de MkDocs. <pre><code>    mkdocs new web\n</code></pre> Se crear\u00e1 una carpeta con el nombre del proyecto, dentro de la cual se generar\u00e1 una estructura que incluye un archivo <code>mkdocs.yml</code> para la configuraci\u00f3n, junto con una carpeta <code>docs</code> que almacenar\u00e1 los archivos en formato Markdown destinados a la documentaci\u00f3n.</li> <li>Cambia el directorio actual al que acabas de crear para comenzar a trabajar en \u00e9l. <pre><code>    cd web\n</code></pre></li> </ul> </li> <li> <p>He copiado los archivos elaborados con Markdown (.md) que ya he creado para las Pr\u00e1cticas 1 y 2 en la carpeta <code>docs</code>. </p> </li> <li>Una vez completada la documentaci\u00f3n, utilizaremos MkDocs para generar una p\u00e1gina web est\u00e1tica que contendr\u00e1 toda la informaci\u00f3n escrita en formato Markdown.     <pre><code>    mkdocs build\n</code></pre>    Esto generar\u00e1 los archivos para la web en la carpeta <code>site</code>.</li> <li>Crearemos un repositorio en GitHub para alojar nuestro proyecto. Esto nos permitir\u00e1 versionar el c\u00f3digo y facilitar el despliegue en GitHub Pages.<ul> <li>Inicializa un nuevo repositorio de Git en tu proyecto local. <pre><code>    git init\n</code></pre></li> <li>A\u00f1ade todos los archivos del proyecto al \u00e1rea de preparaci\u00f3n. <pre><code>    git add .\n</code></pre></li> <li>Guarda los cambios en el repositorio con un mensaje descriptivo. <pre><code>    git commit -m \"Primer commit\"\n</code></pre></li> <li>Conecta tu repositorio local con el repositorio remoto en GitHub. <pre><code>    git remote add origin https://github.com/tu-usuario/tu-repo.git\n</code></pre></li> <li>Sube los cambios locales al repositorio remoto en la rama master. <pre><code>    git push -u origin master\n</code></pre></li> </ul> </li> <li> <p>Con el sitio web generado, utilizaremos GitHub Pages para desplegarlo de manera sencilla y gratuita, haci\u00e9ndolo accesible a trav\u00e9s de una URL p\u00fablica.</p> <ul> <li>Este comando construye tu sitio web est\u00e1tico generado por MkDocs y lo sube directamente a la rama <code>gh-pages</code> de tu repositorio en GitHub.  <pre><code>    mkdocs gh-deploy\n</code></pre>   Esto habilita la publicaci\u00f3n de tu sitio en GitHub Pages, haciendo que est\u00e9 disponible en l\u00ednea a trav\u00e9s de la URL de tu repositorio.</li> </ul> </li> <li> <p>Finalmente, comprobaremos que el sitio web est\u00e9 en l\u00ednea y funcionando correctamente accediendo a la URL proporcionada por GitHub Pages.</p> <p>https://tu-usuario.github.io/tu-repo/</p> </li> </ol>"},{"location":"Unidad1/practica1-3/#creacion-pagina-estatica-con-mkdocs","title":"\u2699 Creaci\u00f3n p\u00e1gina est\u00e1tica con MkDocs","text":""},{"location":"Unidad2/practica1/","title":"\ud83d\udcd8Pr\u00e1ctica 1. Implantaci\u00f3n de una web est\u00e1tica con Apache","text":"<p>Objetivos</p> <ul> <li>Instalar y configurar un servidor web Apache2.</li> <li>Crear distintos Host Virtuales en apache2 que nos permiten tener sitios web diferenciados.</li> <li>Acceder a cada Host Virtual con un determinado nombre de dominio.   </li> </ul>"},{"location":"Unidad2/practica1/#instalacion-del-servidor-apache2","title":"Instalaci\u00f3n del servidor Apache2","text":"<p>Instalamos el servidor web Apache2 utilizando el gestor de paquetes <code>apt</code>.</p> <ul> <li>Ejecutando el siguiente comando      <pre><code>    sudo apt install apache2\n</code></pre> </li> </ul>"},{"location":"Unidad2/practica1/#comprobacion-del-estado-de-apache","title":"Comprobaci\u00f3n del estado de Apache","text":"<p>Verificamos que el servidor Apache est\u00e9 activo y funcionando con <code>systemctl</code>.</p> <ul> <li>Ejecutando el siguiente comando      <pre><code>    sudo systemctl status apache2\n</code></pre> </li> </ul>"},{"location":"Unidad2/practica1/#creacion-de-directorios-para-los-sitios-web","title":"Creaci\u00f3n de directorios para los sitios web","text":"<p>Creamos los directorios donde estar\u00e1n los archivos relacionados con la p\u00e1gina web en el directorio <code>/var/www/html</code></p> <ul> <li>Creamos los directorios con el comando <code>mkdir</code> <pre><code>    sudo mkdir /var/www/html/web1\n</code></pre> </li> </ul>"},{"location":"Unidad2/practica1/#asignar-permisos-correctos","title":"Asignar permisos correctos","text":"<p>Asignamos los permisos necesarios para que el servidor Apache pueda acceder a ellos con <code>chown</code> cambiamos los permisos.     <pre><code>    sudo chmod -R 755 /var/www/html\n</code></pre> <pre><code>    sudo chown -R USUARIO:USUARIO /var/www/html/web1\n    sudo chown -R USUARIO:USUARIO /var/www/html/web2\n</code></pre> </p>"},{"location":"Unidad2/practica1/#duplicar-los-archivos-de-configuracion","title":"Duplicar los archivos de configuraci\u00f3n","text":"<p>Vamos a copiar la configuraci\u00f3n predeterminada de Apache para usarla como plantilla.     <pre><code>    sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/web1.conf\n    sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/web2.conf\n</code></pre> </p>"},{"location":"Unidad2/practica1/#editar-los-archivos-creados","title":"Editar los archivos creados","text":"<p>Vamos a modificar los archivos de configuraci\u00f3n para que cada web apunten al directorio creado anteriormente     <pre><code>    sudo nano /etc/apache2/sites-available/web1.conf\n    sudo nano /etc/apache2/sites-available/web2.conf\n</code></pre></p> <ul> <li> <p>Web 1 </p> </li> <li> <p>Web 2 </p> </li> </ul>"},{"location":"Unidad2/practica1/#creamos-los-archivos-html-para-que-se-visualicen-en-las-webs","title":"Creamos los archivos HTML para que se visualicen en las Webs","text":"<p>Creamos los archivos <code>.html</code> para que el servidor los pueda interpretar</p> <ul> <li>Contenido de los archivos <code>HTML</code> </li> </ul>"},{"location":"Unidad2/practica1/#activacion-de-los-virtualhost","title":"Activaci\u00f3n de los VirtualHost","text":"<p>Activamos los VirtualHost con el comando <code>a2ensite</code> sobre el archivo de configuraci\u00f3n</p> <ul> <li> <p>Activacion Web1     <pre><code>    sudo a2ensite web1.conf\n</code></pre></p> </li> <li> <p>Activacion Web2     <pre><code>    sudo a2ensite web2.conf\n</code></pre> </p> </li> <li> <p>Nos pide realizar un reinicio del servicio para que se apliquen los cambios, volvemos a usar el comando <code>systemctl</code></p> <p><code>bash     sudo systemctl reload apache2</code></p> </li> </ul> <p></p>"},{"location":"Unidad2/practica1/#editar-archivo-hosts","title":"Editar archivo hosts","text":"<p>Vamos a editar el archivo de <code>/etc/hosts/</code> para que nuestro propio equipo pueda resolver la web \u00fanicamente con el nombre de dominio     <pre><code>    sudo nano /etc/hosts\n</code></pre> </p>"},{"location":"Unidad2/practica1/#comprobacion-de-las-webs-estaticas","title":"Comprobaci\u00f3n de las webs est\u00e1ticas","text":"<ul> <li>Accedemos a la url <code>http://web1</code></li> </ul> <ul> <li>Accedemos a la url <code>http://web2</code></li> </ul>"},{"location":"Unidad2/practica2/","title":"Pr\u00e1ctica 2. Certificado SSL/TLS","text":"<p>Objetivos</p> <ul> <li>Crear un certificado SSL/TLS autofirmado con la herramienta openssl.</li> <li>Configurar el servidor web Apache para que utilice el certificado SSL/TLS autofirmado.</li> </ul>"},{"location":"Unidad2/practica2/#instalar-openssl","title":"Instalar OpenSSL","text":"<p>Es necessario realizar la instalaci\u00f3n de <code>OpenSSL</code>para generar las claves y el certificado.      <pre><code>   sudo apt install openssl -y\n</code></pre></p>"},{"location":"Unidad2/practica2/#crear-un-certificado-ssl-autofirmado","title":"Crear un Certificado SSL Autofirmado","text":"<ul> <li> <p>Crear un directorio para almacenar el certificado     <pre><code>    sudo mkdir /etc/apache2/ssl\n</code></pre> </p> </li> <li> <p>Generar el certificado SSL y la clave privada:     <pre><code>    sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/firma.key -out /etc/apache2/ssl/firma.crt\n</code></pre> </p> </li> </ul>"},{"location":"Unidad2/practica2/#configurar-apache-para-usar-ssl","title":"Configurar Apache para usar SSL","text":"<ul> <li> <p>Habilitar los m\u00f3dulos SSL en Apache     <pre><code>    sudo a2enmod ssl\n</code></pre></p> <p></p> </li> <li> <p>Reinicio del servicio <code>Apache</code> y comprobaci\u00f3n de su estado</p> <p></p> </li> <li> <p>Duplicamos el archivo de configuraci\u00f3n de Apache     <pre><code>    sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/ssl.conf\n</code></pre> </p> </li> </ul>"},{"location":"Unidad2/practica2/#editar-archivo-configuracion-para-ssl","title":"Editar archivo configuraci\u00f3n para SSL","text":"<ul> <li> <p>Editamos el archivo de configuraci\u00f3n copiado anteriormente.     <pre><code>    sudo nano /etc/apache2/sites-available/ssl.conf\n</code></pre></p> </li> <li> <p>Modificar el archivo de configuraci\u00f3n</p> </li> </ul> <p></p> <p>Cambiamos la configuraci\u00f3n para que escuche en el puerto 443, a\u00f1adir las directivas SSL y apuntamos a la web1 de la pr\u00e1ctica anterior. </p>"},{"location":"Unidad2/practica2/#habilitar-el-nuevo-sitio-ssl","title":"Habilitar el nuevo sitio SSL","text":"<ul> <li>Habilitar el nuevo archivo de configuraci\u00f3n     <pre><code>    sudo a2ensite ssl.conf\n</code></pre> </li> </ul>"},{"location":"Unidad2/practica2/#reiniciar-servicio-apache2","title":"Reiniciar servicio Apache2","text":"<p>Es necesario el reinicio del servicio para que los cambios se vean.     <pre><code>    sudo systemctl restart apache2\n</code></pre></p> <p></p>"},{"location":"Unidad2/practica2/#comprobacion-web-con-ssl","title":"Comprobaci\u00f3n Web con SSL","text":"<p>Acceso por <code>https</code> con \u00e9xito</p> <p> </p> <ul> <li>Certificado SSL visualizado desde el navegador </li> </ul>"}]}